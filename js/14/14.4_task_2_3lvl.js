/*Объясните значение "this"
В представленном ниже коде мы намерены вызвать obj.go() метод 4 раза подряд.
Но вызовы (1) и (2) работают иначе, чем (3) и (4). Почему?*/

let obj, method;

obj = {
  go: function() { alert(this); }
};

obj.go();               // (1) [object Object]

(obj.go)();             // (2) [object Object]

(method = obj.go)();    // (3) undefined

(obj.go || obj.stop)(); // (4) undefined

/*Различное поведение вызовов obj.go() в коде обусловлено контекстом выполнения (this) и особенностями работы оператора () в JavaScript.

В вызове obj.go(), функция go вызывается как метод объекта obj, поэтому значение this внутри функции указывает на сам объект obj. В результате, выводится [object Object].

В вызове (obj.go)(), скобки вокруг obj.go не оказывают влияния на контекст выполнения функции go. При вызове obj.go внутри скобок, функция вызывается как метод объекта obj, и значение this остается ссылкой на объект obj. Результат будет таким же, как и в предыдущем случае: [object Object].

В вызове (method = obj.go)(), происходит присваивание ссылки на функцию go объекта obj переменной method. Затем, при вызове method(), функция вызывается без указания объекта, поэтому значение this внутри функции становится неопределенным (undefined). В результате, выводится undefined.

В вызове (obj.go || obj.stop)(), происходит использование оператора || для выбора одного из двух выражений. В данном случае, выражение obj.go вычисляется как истина, поэтому оно выбирается для выполнения. При вызове (obj.go)(), контекст выполнения функции go такой же, как в первых двух случаях, и выводится [object Object].

Таким образом, различие в поведении связано с контекстом выполнения (this) и способом вызова функции. */

//решение 
let obj, method;

obj = {
  go: function() { alert(this); }
};

obj.go();               // (1) [object Object]

(obj.go)();             // (2) [object Object]

(method = obj.go());   // (3) [object Object]
  
(obj.go() || obj.stop); // (4) [object Object]